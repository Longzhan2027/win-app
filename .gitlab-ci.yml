include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'
    
  - project: 'ProtonVPN/qa/test-configuration'
    ref: master
    file: '/windows-config.yml'
    
  - local: '/.gitlab-ci-templates.yml'

  - component: $CI_SERVER_HOST/proton/devops/cicd-components/tools/artifactlift/release-candidate@0.1.20
    inputs:
      product: vpn
      platform: windows
      artifact_list: "*"
      artifact_local_directory: Setup/Installers
  - component: $CI_SERVER_HOST/proton/devops/cicd-components/tools/artifactlift/release@0.1.20
    inputs:
      product: vpn
      platform: windows
      artifact_list: ""
      artifact_metadata_path: ""
      artifact_metadata_list: ""

variables:
  PUBLIC_REPO_URL: git@github.com:ProtonVPN/win-app.git
  TEST_ARTIFACT_PATH: src/bin/TestArtifactData/
  TEST_REPORT_PATH: results/
  PROJECT_ID: "13"
  MILESTONE: "Windows"
  FF_USE_FASTZIP: "true"
  TRANSFER_METER_FREQUENCY: "2s"
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  CACHE_COMPRESSION_LEVEL: "fastest"

stages:
  - release
  - bot # comes from translations/generator job
  - build
  - test
  - build-installer
  - internal-beta
  - publish-to-slack
  - test-setup
  - ui-test
  - generate
  - deploy
  - test-upload
  - installation-test
  - test-cleanup
  - mirror

build-release-x64:
  extends: .build-script
  only:
    - master
    - /^release.*$/
  variables:
    TYPE: Release
    DEPENDENCIES: publish
    PLATFORM: x64
    BUILD_PATH: src/bin/win-x64/publish

build-release-arm64:
  extends: .build-script
  only:
    - master
    - /^release.*$/
  tags:
    - windows-arm64
  variables:
    TYPE: Release
    DEPENDENCIES: publish
    PLATFORM: arm64
    BUILD_PATH: src/bin/win-arm64/publish

build-bti-x64:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release.*$/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $BTI_SCHEDULED == "true"
      when: always
    - when: manual
  extends:
    - .build-bti-vars  
    - .build-script
  when: manual
  variables:
    TYPE: Debug
    PLATFORM: x64
    DEPENDENCIES: publish-BTI
    BUILD_PATH: src/bin/win-x64/BTI/publish

build-debug-x64:
  extends: .build-script
  except:
    - master
    - /^release.*$/
    - schedules
  variables:
    TYPE: Debug
    PLATFORM: x64
    DEPENDENCIES: publish
    BUILD_PATH: src/bin/win-x64/publish

build-debug-arm64:
  extends: .build-script
  when: manual
  except:
    - master
    - /^release.*$/
    - schedules
  tags:
    - windows-arm64
  variables:
    TYPE: Debug
    PLATFORM: arm64
    DEPENDENCIES: publish
    BUILD_PATH: src/bin/win-arm64/publish

full-ui-tests-arm:
  tags:
    - windows-arm64-ui
  extends: .test_execution_script
  needs:
    - job: build-installer-debug-arm64
      optional: true
    - job: build-installer-release-arm64
      optional: true
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    - schedules
  variables:
    CATEGORY: "ARM"

ui-test:
  extends: .test_execution_script
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    - schedules
  variables:
    CATEGORY: "UI"

connection-test:
  extends: .test_execution_script
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    - schedules
  variables:
    CATEGORY: "Connection"

bti-test:
  extends: .test_execution_script
  needs:
    - build-BTI-installer-x64
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release.*$/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $BTI_SCHEDULED == "true"
      when: always
    - when: manual
  tags:
    - BTI
  dependencies:
    - build-BTI-installer-x64
  variables:
    CATEGORY: "BTI"
  after_script:
    - ci\test-scripts\alert-failure.ps1

tests-x64-debug:
  tags:
    - windows-dot-net
  extends:
    - .tests
  except:
    - master
    - /^release.*$/
    - schedules
  needs:
    - build-debug-x64
  variables:
    PLATFORM: x64

tests-x64-release:
  tags:
    - windows-dot-net
  extends:
    - .tests
  only:
    - master
    - /^release.*$/
  needs:
    - build-release-x64
  variables:
    PLATFORM: x64

tests-arm64-debug:
  tags:
    - windows-arm64
  extends:
    - .tests
  except:
    - master
    - /^release.*$/
    - schedules
  needs:
    - build-debug-arm64
  variables:
    PLATFORM: arm64

tests-arm64-release:
  tags:
    - windows-arm64
  extends:
    - .tests
  only:
    - master
    - /^release.*$/
  needs:
    - build-release-arm64
  variables:
    PLATFORM: arm64

build-installer-release-x64:
  needs:
    - build-release-x64
  extends: 
    - .build-installer
  only:
    - master
    - /^release.*$/
  variables:
    BUILD_PATH: src/bin/win-x64/publish
    PLATFORM: x64

build-installer-debug-x64:
  needs:
    - build-debug-x64
  extends: 
    - .build-installer
  except:
    - master
    - /^release.*$/
    - schedules
  variables:
    BUILD_PATH: src/bin/win-x64/publish
    PLATFORM: x64

build-installer-debug-arm64:
  needs:
    - build-debug-arm64
  extends: 
    - .build-installer
  except:
    - master
    - /^release.*$/
    - schedules
  variables:
    BUILD_PATH: src/bin/win-arm64/publish
    PLATFORM: arm64

build-installer-release-arm64:
  needs:
    - build-release-arm64
  extends: 
    - .build-installer
  only:
    - master
    - /^release.*$/
  variables:
    BUILD_PATH: src/bin/win-arm64/publish
    PLATFORM: arm64

build-BTI-installer-x64:
  needs:
    - build-bti-x64
  except:
    - master
    - /^release.*$/
  extends: 
    - .build-installer
  variables:
    BUILD_PATH: src/bin/win-x64/BTI/publish
    PLATFORM: x64

prepare-internal-beta-release:
  stage: internal-beta
  tags:
    - windows-dot-net
  when: manual
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\test-scripts\prepare-internal-beta.py
  only:
    - /^release.*$/

mirror:
  stage: mirror
  tags:
    - windows-dot-net
  only:
    refs:
      - tags
      - master
  script:
    - python ci\build-scripts\main.py prepare-ssh $env:SSH_PRIVATE_KEY
    - ssh-keyscan -t rsa github.com | Set-Content "$env:userprofile\.ssh\known_hosts"
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    - git push public "$(git describe --abbrev=0)"

i18n-sync-crowdin:
  when: manual
  variables:
    I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-common

i18n-manual-sync-crowdin:
  when: manual
  only:
    - branches
  variables:
    I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-common

i18n-commit-translations:
  extends: .i18n-commit-locales-shared
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: 'windows-vpn'
  before_script:
    - git config --global core.autocrlf false

create-release:
  image: harbor.protontech.ch/docker.io/library/python:latest
  tags:
    - shared-small
  stage: release
  when: manual
  only:
    refs:
      - develop
  script:
    - apt-get update && apt-get install -y python3 python3-pip git
    - python3 ci/build-scripts/release.py

send-slack-notification:
  tags:
    - windows-dot-net
  only:
    refs:
      - develop
  except:
    - schedules
  stage: publish-to-slack
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\build-scripts\main.py send-slack-notification

generate-release-artifacts:
  stage: generate
  image: harbor.protontech.ch/docker.io/library/alpine:3.20
  needs:
    - build-installer-release-x64
    - build-installer-release-arm64
  tags:
    - shared-small
  script:
    - set -ex
    - export RELEASE_VERSION="${CI_COMMIT_BRANCH##release/}" && echo "RELEASE_VERSION=${RELEASE_VERSION}" | tee release.env
    - echo "ARTIFACT_LIST=ProtonVPN_v${RELEASE_VERSION}_x64.exe ProtonVPN_v${RELEASE_VERSION}_arm64.exe" | tee -a release.env
  artifacts:
    reports:
      dotenv: release.env
  only:
    - /^release.*$/

artifactlift-release-candidate-artifacts:
  rules:
    - when: never

artifactlift-release-artifacts:
  rules:
    - when: never

release-binary-to-nexus:
  needs:
    - generate-release-artifacts
    - job: build-installer-release-x64
      artifacts: true
    - job: build-installer-release-arm64
      artifacts: true
  extends: artifactlift-release-candidate-artifacts
  rules:
    - if: '$CI_COMMIT_BRANCH == "release/9.9.9"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release\/\d+\.\d+\.\d+/'
      when: manual
    - when: never

release-binary-to-prod:
  extends: artifactlift-release-artifacts
  needs:
    - job: generate-release-artifacts
      artifacts: true
    - release-binary-to-nexus
  rules:
    - if: '$CI_COMMIT_BRANCH == "release/9.9.9"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release\/\d+\.\d+\.\d+/'
      when: manual
    - when: never